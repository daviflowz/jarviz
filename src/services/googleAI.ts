import { GoogleGenerativeAI } from '@google/generative-ai';
import stringSimilarity from 'string-similarity';
import { realTimeSearchService } from './realTimeSearch';
import { db } from '../firebaseConfig';
import { 
  doc, 
  setDoc, 
  getDoc, 
  collection, 
  addDoc, 
  query, 
  where, 
  orderBy, 
  limit, 
  getDocs,
  deleteDoc,
  updateDoc,
  serverTimestamp 
} from 'firebase/firestore';

const API_KEY = 'AIzaSyDjunWvcLsfzl5ZFrLVcZh7YGC22DyHm4E';

const genAI = new GoogleGenerativeAI(API_KEY);

// Configura√ß√µes de limites
const USER_LIMITS = {
  dailyRequests: 100,      // 100 requests/dia por usu√°rio
  monthlyTokens: 50000,    // 50k tokens/m√™s por usu√°rio
  maxMessageLength: 500    // 500 caracteres por mensagem
};

// Cache para respostas similares
const responseCache = new Map();

export interface Message {
  id: string;
  role: 'user' | 'assistant';
  content: string;
  timestamp: Date;
}

class GoogleAIService {
  private chatHistory: Message[] = [];
  private greetingIndex = 0;
  private conversationContext: string = '';
  private contextEntities: Map<string, string> = new Map(); // Para rastrear entidades mencionadas
  private userId: string | null = null;
  private isInitialized = false;
  
  // Array de sauda√ß√µes variadas
  private greetings = [
    "Oi! Tudo bem? Como posso te ajudar hoje?",
    "Ol√°! Em que posso ser √∫til?",
    "Oi! Aqui estou, pronto para ajudar!",
    "Ol√°! Como posso te auxiliar?",
    "Oi! Tudo certo? Como posso te ajudar?",
    "Ol√°! Em que posso colaborar?",
    "Oi! Estou aqui para ajudar!",
    "Ol√°! Como posso ser √∫til hoje?",
    "Oi! Pronto para ajudar!",
    "Ol√°! Em que posso te auxiliar?",
    "Oi! Aqui estou para te auxiliar!",
    "Ol√°! Como posso ser √∫til?",
    "Oi! Estou √† disposi√ß√£o!",
    "Ol√°! Em que posso ajudar?",
    "Oi! Pronto para colaborar!",
    "Ol√°! Como posso te servir?",
    "Oi! Aqui para ajudar!",
    "Ol√°! Em que posso ser √∫til?",
    "Oi! Pronto para auxiliar!",
    "Ol√°! Como posso ajudar?"
  ];

  // Inicializar servi√ßo com usu√°rio
  async initialize(userId: string): Promise<void> {
    this.userId = userId;
    this.isInitialized = true; // Marcar como inicializado primeiro
    
    try {
      console.log('Carregando hist√≥rico do usu√°rio...');
      await this.loadUserHistory();
      console.log('Carregando entidades de contexto...');
      await this.loadContextEntities();
      console.log('Servi√ßo inicializado para usu√°rio:', userId);
    } catch (error) {
      console.error('Erro ao carregar dados do Firestore:', error);
      // Mesmo com erro, o servi√ßo est√° inicializado
      console.log('Servi√ßo inicializado (modo offline):', userId);
    }
  }

  // Helper para log de erro
  private logError(context: string, error: unknown): void {
    console.error(`‚ùå ${context}:`, error);
    console.error('üîç Detalhes do erro:', {
      code: (error as any)?.code,
      message: (error as any)?.message,
      stack: (error as any)?.stack
    });
  }

  // Salvar mensagem no Firestore
  async saveMessageToFirestore(message: Message): Promise<void> {
    if (!this.userId) {
      console.log('‚ùå saveMessageToFirestore: userId n√£o definido');
      return;
    }

    try {
      console.log('üìù Salvando mensagem no Firestore:', message.content.substring(0, 50) + '...');
      const messageData = {
        ...message,
        timestamp: serverTimestamp(),
        userId: this.userId
      };

      console.log('üìä Dados da mensagem:', messageData);
      const docRef = await addDoc(collection(db, 'messages'), messageData);
      console.log('‚úÖ Mensagem salva no Firestore com ID:', docRef.id);
    } catch (error) {
      this.logError('Erro ao salvar mensagem no Firestore', error);
    }
  }

  // Salvar entidade de contexto no Firestore
  async saveContextEntity(key: string, value: string): Promise<void> {
    if (!this.userId) {
      console.log('‚ùå saveContextEntity: userId n√£o definido');
      return;
    }

    try {
      console.log('üè∑Ô∏è Salvando entidade de contexto:', key, '=', value);
      const entityData = {
        key,
        value,
        userId: this.userId,
        lastMentioned: serverTimestamp(),
        mentionCount: 1
      };

      // Verificar se j√° existe
      const entityRef = doc(db, 'contextEntities', `${this.userId}_${key}`);
      const entityDoc = await getDoc(entityRef);

      if (entityDoc.exists()) {
        console.log('üîÑ Atualizando entidade existente:', key);
        // Atualizar contador e data
        await updateDoc(entityRef, {
          mentionCount: entityDoc.data().mentionCount + 1,
          lastMentioned: serverTimestamp()
        });
      } else {
        console.log('üÜï Criando nova entidade:', key);
        // Criar nova entidade
        await setDoc(entityRef, entityData);
      }
      console.log('‚úÖ Entidade salva com sucesso:', key);
    } catch (error) {
      this.logError('Erro ao salvar entidade de contexto', error);
    }
  }

  // Carregar hist√≥rico do usu√°rio do Firestore
  async loadUserHistory(): Promise<Message[]> {
    if (!this.userId) {
      console.log('‚ùå loadUserHistory: userId n√£o definido');
      return [];
    }

    try {
      console.log('üìö Carregando hist√≥rico do usu√°rio:', this.userId);
      const messagesQuery = query(
        collection(db, 'messages'),
        where('userId', '==', this.userId),
        orderBy('timestamp', 'desc'),
        limit(50) // √öltimas 50 mensagens
      );

      console.log('üîç Executando query do Firestore...');
      const querySnapshot = await getDocs(messagesQuery);
      console.log('üìä Query executada, documentos encontrados:', querySnapshot.size);
      
      const messages: Message[] = [];

      querySnapshot.forEach((doc) => {
        const data = doc.data();
        messages.push({
          id: doc.id,
          role: data.role,
          content: data.content,
          timestamp: data.timestamp?.toDate() || new Date()
        });
      });

      // Ordenar por timestamp (mais antigas primeiro)
      messages.reverse();
      this.chatHistory = messages;
      
      console.log('‚úÖ Hist√≥rico carregado:', messages.length, 'mensagens');
      return messages;
    } catch (error) {
      this.logError('Erro ao carregar hist√≥rico', error);
      return [];
    }
  }

  // Carregar entidades de contexto do Firestore
  async loadContextEntities(): Promise<void> {
    if (!this.userId) {
      console.log('‚ùå loadContextEntities: userId n√£o definido');
      return;
    }

    try {
      console.log('üè∑Ô∏è Carregando entidades de contexto para usu√°rio:', this.userId);
      const entitiesQuery = query(
        collection(db, 'contextEntities'),
        where('userId', '==', this.userId),
        orderBy('lastMentioned', 'desc'),
        limit(20) // √öltimas 20 entidades
      );

      console.log('üîç Executando query de entidades...');
      const querySnapshot = await getDocs(entitiesQuery);
      console.log('üìä Entidades encontradas:', querySnapshot.size);
      
      this.contextEntities.clear();

      querySnapshot.forEach((doc) => {
        const data = doc.data();
        this.contextEntities.set(data.key, data.value);
      });

      console.log('‚úÖ Entidades de contexto carregadas:', this.contextEntities.size);
    } catch (error) {
      this.logError('Erro ao carregar entidades de contexto', error);
    }
  }

  // Limpar hist√≥rico do usu√°rio (Firestore + mem√≥ria)
  async clearUserHistory(): Promise<void> {
    if (!this.userId) return;

    try {
      // Limpar mensagens do Firestore
      const messagesQuery = query(
        collection(db, 'messages'),
        where('userId', '==', this.userId)
      );

      const messagesSnapshot = await getDocs(messagesQuery);
      const deletePromises = messagesSnapshot.docs.map(doc => deleteDoc(doc.ref));
      await Promise.all(deletePromises);

      // Limpar entidades de contexto do Firestore
      const entitiesQuery = query(
        collection(db, 'contextEntities'),
        where('userId', '==', this.userId)
      );

      const entitiesSnapshot = await getDocs(entitiesQuery);
      const deleteEntityPromises = entitiesSnapshot.docs.map(doc => deleteDoc(doc.ref));
      await Promise.all(deleteEntityPromises);

      // Limpar mem√≥ria
      this.chatHistory = [];
      this.contextEntities.clear();

      console.log('Hist√≥rico limpo completamente');
    } catch (error) {
      console.error('Erro ao limpar hist√≥rico:', error);
    }
  }

  // Verificar limites do usu√°rio
  async checkUserLimits(): Promise<{ canProceed: boolean; reason?: string }> {
    if (!this.userId) return { canProceed: true };

    try {
      const today = new Date();
      today.setHours(0, 0, 0, 0);

      const usageQuery = query(
        collection(db, 'usage'),
        where('userId', '==', this.userId),
        where('date', '>=', today)
      );

      const usageSnapshot = await getDocs(usageQuery);
      let dailyRequests = 0;
      let monthlyTokens = 0;

      usageSnapshot.forEach((doc) => {
        const data = doc.data();
        dailyRequests += data.requests || 0;
        monthlyTokens += data.tokens || 0;
      });

      if (dailyRequests >= USER_LIMITS.dailyRequests) {
        return { canProceed: false, reason: 'Limite di√°rio atingido' };
      }

      if (monthlyTokens >= USER_LIMITS.monthlyTokens) {
        return { canProceed: false, reason: 'Limite mensal de tokens atingido' };
      }

      return { canProceed: true };
    } catch (error) {
      console.error('Erro ao verificar limites:', error);
      return { canProceed: true };
    }
  }

  // Atualizar contadores de uso
  async updateUsage(tokensUsed: number): Promise<void> {
    if (!this.userId) return;

    try {
      const today = new Date();
      today.setHours(0, 0, 0, 0);

      const usageRef = doc(db, 'usage', `${this.userId}_${today.toISOString().split('T')[0]}`);
      const usageDoc = await getDoc(usageRef);

      if (usageDoc.exists()) {
        await updateDoc(usageRef, {
          requests: (usageDoc.data().requests || 0) + 1,
          tokens: (usageDoc.data().tokens || 0) + tokensUsed,
          lastUpdated: serverTimestamp()
        });
      } else {
        await setDoc(usageRef, {
          userId: this.userId,
          date: today,
          requests: 1,
          tokens: tokensUsed,
          lastUpdated: serverTimestamp()
        });
      }
    } catch (error) {
      console.error('Erro ao atualizar uso:', error);
    }
  }

  // Extrair entidades do contexto (pessoas, lugares, coisas)
  private extractEntities(text: string): Map<string, string> {
    const entities = new Map<string, string>();
    
    // Padr√µes para identificar entidades
    const patterns = [
      // Pessoas (nomes pr√≥prios)
      /\b([A-Z][a-z]+ [A-Z][a-z]+)\b/g,
      // Lugares (cidades, pa√≠ses)
      /\b([A-Z][a-z]+(?: [A-Z][a-z]+)*)\b/g,
      // Organiza√ß√µes
      /\b([A-Z][A-Z]+)\b/g,
      // Pronomes que podem se referir a entidades
      /\b(ele|ela|eles|elas|este|esta|isso|aquilo)\b/gi
    ];

    patterns.forEach(pattern => {
      const matches = text.match(pattern);
      if (matches) {
        matches.forEach(match => {
          if (match.length > 2) { // Ignorar palavras muito curtas
            entities.set(match.toLowerCase(), match);
          }
        });
      }
    });

    return entities;
  }

  // Resolver refer√™ncias de contexto
  private resolveContextReferences(message: string): string {
    let resolvedMessage = message;
    
    // Verificar se h√° pronomes que precisam de contexto
    const pronouns = ['ele', 'ela', 'eles', 'elas', 'este', 'esta', 'isso', 'aquilo'];
    const hasPronouns = pronouns.some(pronoun => 
      message.toLowerCase().includes(pronoun)
    );

    if (hasPronouns && this.chatHistory.length > 0) {
      // Buscar a √∫ltima entidade mencionada
      const lastUserMessage = this.chatHistory
        .filter(msg => msg.role === 'user')
        .slice(-3) // √öltimas 3 mensagens do usu√°rio
        .reverse()
        .find(msg => {
          const entities = this.extractEntities(msg.content);
          return entities.size > 0;
        });

      if (lastUserMessage) {
        const entities = this.extractEntities(lastUserMessage.content);
        const lastEntity = Array.from(entities.values())[0];
        
        if (lastEntity) {
          // Substituir pronomes por entidades quando apropriado
          resolvedMessage = resolvedMessage.replace(/\bele\b/gi, lastEntity);
          resolvedMessage = resolvedMessage.replace(/\bela\b/gi, lastEntity);
        }
      }
    }

    return resolvedMessage;
  }

  // Gerar hash para cache
  generateCacheKey(message: string): string {
    return message.toLowerCase().trim().replace(/\s+/g, ' ');
  }

  // Verificar cache
  getCachedResponse(message: string): string | null {
    const cacheKey = this.generateCacheKey(message);
    const cached = responseCache.get(cacheKey);
    
    // N√ÉO USAR CACHE PARA NADA - sempre buscar dados atualizados
    const timeSensitiveKeywords = [
      'hoje', 'agora', 'atual', 'recente', 'not√≠cia', 'noticia', 'not√≠cias', 'noticias',
      'clima', 'temperatura', 'tempo', 'data', 'evento', 'acontecimento', 'parada',
      'festival', 'show', 'concerto', 'encontro', 'reuni√£o', 'reuniao', 'amanh√£', 'amanha',
      'ontem', 'semana', 'm√™s', 'mes', 'ano', '2024', '2025', 'previs√£o', 'previsao'
    ];
    
    const lowerMessage = message.toLowerCase();
    const isTimeSensitive = timeSensitiveKeywords.some(keyword => 
      lowerMessage.includes(keyword)
    );
    
    // SEMPRE ignorar cache para informa√ß√µes sens√≠veis ao tempo
    if (isTimeSensitive) {
      console.log('Informa√ß√£o sens√≠vel ao tempo detectada, IGNORANDO CACHE COMPLETAMENTE');
      return null;
    }
    
    // Para outras informa√ß√µes, usar cache por apenas 10 minutos
    if (cached && Date.now() - cached.timestamp < 600000) { // 10 minutos
      return cached.response;
    }
    
    return null;
  }

  // Obter sauda√ß√£o variada
  getRandomGreeting(): string {
    const greeting = this.greetings[this.greetingIndex];
    this.greetingIndex = (this.greetingIndex + 1) % this.greetings.length;
    return greeting;
  }

  // Verificar comandos especiais
  async handleSpecialCommands(message: string): Promise<string | null> {
    const lowerMessage = message.toLowerCase();
    
    // Comandos de tempo
    if (lowerMessage.includes('que horas') || lowerMessage.includes('que hora')) {
      const now = new Date();
      return `Agora s√£o ${now.toLocaleTimeString('pt-BR')}`;
    }

    // Comandos de data
    if (lowerMessage.includes('que dia') || lowerMessage.includes('que data')) {
      const now = new Date();
      return `Hoje √© ${now.toLocaleDateString('pt-BR', { 
        weekday: 'long', 
        year: 'numeric', 
        month: 'long', 
        day: 'numeric' 
      })}`;
    }

    // Comandos de matem√°tica
    if (lowerMessage.includes('calcule') || lowerMessage.includes('quanto √©')) {
      try {
        const mathExpression = message.replace(/[^0-9+\-*/().]/g, '');
        // eslint-disable-next-line no-eval
        const result = eval(mathExpression);
        return `O resultado √©: ${result}`;
      } catch (error) {
        return 'Desculpe, n√£o consegui calcular essa express√£o.';
      }
    }

    // Comandos de "o que eu perguntei"
    if (lowerMessage.includes('o que eu perguntei') || lowerMessage.includes('o que eu te perguntei')) {
      if (this.chatHistory.length > 0) {
        const lastUserMessage = this.chatHistory
          .filter(msg => msg.role === 'user')
          .pop();
        if (lastUserMessage) {
          return `Voc√™ perguntou: "${lastUserMessage.content}". Como posso te ajudar com isso?`;
        }
      }
      return 'N√£o encontrei uma pergunta anterior no hist√≥rico. Pode me fazer sua pergunta?';
    }

    // Comandos de clima via Google Search
    if (lowerMessage.includes('graus') || lowerMessage.includes('temperatura') || lowerMessage.includes('clima') || lowerMessage.includes('fazendo')) {
      const cityMatch = message.match(/(?:em|de|para)\s+([a-zA-Z√Ä-√ø\s]+?)(?:\?|$|,)/i);
      const city = cityMatch ? cityMatch[1].trim() : 'S√£o Paulo';
      
      try {
        console.log('Buscando clima atualizado para:', city);
        const results = await realTimeSearchService.searchWeb(`clima ${city} hoje agora temperatura atualizada`);
        console.log('Resultados do clima:', results);
        
        if (results.length > 0) {
          const topResult = results[0];
          return `**Clima atual em ${city}:**
**${topResult.title}**
${topResult.snippet}
Link: ${topResult.link}

Pesquisa em tempo real via Google!`;
        } else {
          return `N√£o consegui encontrar informa√ß√µes atualizadas do clima para ${city}. Consulte Climatempo.com para dados em tempo real.`;
        }
      } catch (error) {
        console.error('Erro ao buscar clima:', error);
        return `Erro ao buscar clima atualizado para ${city}. Tente consultar Climatempo.com diretamente.`;
      }
    }

    // Comandos de not√≠cias via Google Search com filtros melhorados
    if (lowerMessage.includes('not√≠cia') || lowerMessage.includes('noticia') || lowerMessage.includes('noticias') || lowerMessage.includes('not√≠cias')) {
      // Extrair o t√≥pico da pergunta, se especificado
      let query = 'brasil'; // padr√£o
      
      if (lowerMessage.includes('mundo') || lowerMessage.includes('internacional')) {
        query = 'mundo';
      } else if (lowerMessage.includes('brasil') || lowerMessage.includes('brasileira')) {
        query = 'brasil';
      } else {
        // Tentar extrair t√≥pico espec√≠fico da mensagem
        const queryMatch = message.match(/(?:sobre|de|not√≠cia\s+)([a-zA-Z√Ä-√ø\s]+?)(?:\?|$|,)/i);
        if (queryMatch) {
          query = queryMatch[1].trim();
        }
      }
      
      try {
        console.log('Buscando not√≠cias para:', query);
        const results = await realTimeSearchService.searchWeb(`not√≠cias ${query} hoje atualizadas`);
        console.log('Resultados de not√≠cias:', results);
        
        if (results.length > 0) {
          const topResult = results[0];
          const dateInfo = topResult.date ? ` (${topResult.date})` : '';
          return `**Not√≠cias sobre ${query}:**
**${topResult.title}**${dateInfo}
${topResult.snippet}
Link: ${topResult.link}

Pesquisa em tempo real via Google!`;
        } else {
          return `N√£o encontrei nenhuma not√≠cia relevante sobre esse assunto hoje. Tente ser mais espec√≠fico.`;
        }
      } catch (error) {
        console.error('Erro ao buscar not√≠cias:', error);
        return `Erro ao buscar not√≠cias. Tente novamente!`;
      }
    }

    // Comandos de pesquisa web em tempo real
    if (lowerMessage.startsWith('pesquise ') || lowerMessage.startsWith('busque ') || lowerMessage.startsWith('procure ')) {
      const searchQuery = message.replace(/^pesquise\s+|^busque\s+|^procure\s+/gi, '').trim();
      if (searchQuery) {
        try {
          console.log('Buscando pesquisa para:', searchQuery);
          
          // Adicionar "atualizado" ou "hoje" para pesquisas que podem ser sobre eventos
          const timeKeywords = ['parada', 'evento', 'festival', 'show', 'concerto', 'encontro'];
          const hasTimeKeyword = timeKeywords.some(keyword => 
            searchQuery.toLowerCase().includes(keyword)
          );
          
          const enhancedQuery = hasTimeKeyword ? `${searchQuery} atualizado hoje` : searchQuery;
          const results = await realTimeSearchService.searchWeb(enhancedQuery);
          console.log('Resultados da pesquisa:', results);
          
          if (results.length > 0) {
            const topResult = results[0];
            const dateInfo = topResult.date ? ` (${topResult.date})` : '';
            return `**Pesquisa sobre "${searchQuery}":**
**${topResult.title}**${dateInfo}
${topResult.snippet}
Link: ${topResult.link}

Pesquisa em tempo real via Google!`;
          } else {
            return `N√£o encontrei nenhuma not√≠cia relevante sobre esse assunto hoje. Tente ser mais espec√≠fico.`;
          }
        } catch (error) {
          console.error('Erro na pesquisa:', error);
          return `Erro na pesquisa. Tente novamente!`;
        }
      }
    }

    return null;
  }

  // Salvar no cache
  saveToCache(message: string, response: string): void {
    const cacheKey = this.generateCacheKey(message);
    responseCache.set(cacheKey, {
      response,
      timestamp: Date.now()
    });

    // Limpar cache antigo (manter s√≥ 100 entradas)
    if (responseCache.size > 100) {
      const entries = Array.from(responseCache.entries());
      entries.slice(0, 50).forEach(([key]) => responseCache.delete(key));
    }
  }

  // Processar com Google AI (m√©todo original)
  async processWithGoogleAI(message: string): Promise<string> {
    try {
      // Verificar data atual para garantir informa√ß√µes atualizadas
      const currentDate = new Date();
      const currentYear = currentDate.getFullYear();
      const currentMonth = currentDate.getMonth() + 1;
      const currentDay = currentDate.getDate();
      
      console.log(`Data atual: ${currentDay}/${currentMonth}/${currentYear}`);
      
      // Resolver refer√™ncias de contexto
      const resolvedMessage = this.resolveContextReferences(message);
      
      // Extrair e armazenar entidades do contexto
      const messageEntities = this.extractEntities(resolvedMessage);
      messageEntities.forEach((entity, key) => {
        this.contextEntities.set(key, entity);
        // Salvar entidade no Firestore
        try {
          this.saveContextEntity(key, entity);
        } catch (error) {
          console.error('Erro ao salvar entidade de contexto:', error);
        }
      });
      
      // Fun√ß√£o para detectar mudan√ßa de t√≥pico (mais conservadora)
      const detectTopicChange = (newMessage: string, history: Message[]): boolean => {
        if (history.length === 0) return false;
        
        const lastMessage = history[history.length - 1].content;
        const similarity = stringSimilarity.compareTwoStrings(
          newMessage.toLowerCase(),
          lastMessage.toLowerCase()
        );
        
        return similarity < 0.05; // Se similaridade < 5%, considera mudan√ßa de t√≥pico
      };

      // Detectar mudan√ßa de t√≥pico (apenas se for muito diferente)
      const isTopicChange = detectTopicChange(resolvedMessage, this.chatHistory);
      
      // Se mudou de t√≥pico drasticamente, limpar hist√≥rico (mas manter mais contexto)
      if (isTopicChange && this.chatHistory.length > 15) {
        this.chatHistory = this.chatHistory.slice(-8); // Manter apenas as √∫ltimas 8
      }

      // Adicionar mensagem do usu√°rio ao hist√≥rico
      const userMessage: Message = {
        id: `user_${Date.now()}`,
        role: 'user',
        content: resolvedMessage,
        timestamp: new Date()
      };
      this.chatHistory.push(userMessage);
      
      // Salvar mensagem no Firestore
      try {
        await this.saveMessageToFirestore(userMessage);
      } catch (error) {
        console.error('Erro ao salvar mensagem do usu√°rio:', error);
      }

      // Manter apenas as √∫ltimas 30 mensagens para contexto
      if (this.chatHistory.length > 30) {
        this.chatHistory = this.chatHistory.slice(-30);
      }

      // Preparar contexto para o modelo
      const recentMessages = this.chatHistory.slice(-15); // √öltimas 15 mensagens
      const context = recentMessages
        .map(msg => `${msg.role === 'user' ? 'Usu√°rio' : 'Jarvis'}: ${msg.content}`)
        .join('\n\n');
      
      // Atualizar contexto da conversa
      this.conversationContext = context;
      
      console.log('Contexto da conversa:', context);

      const model = genAI.getGenerativeModel({ model: 'gemini-2.0-flash-exp' });

      const prompt = `
Voc√™ √© o **JARVIS**, um assistente de IA de √∫ltima gera√ß√£o com capacidades avan√ßadas.

**DATA ATUAL:** ${currentDay}/${currentMonth}/${currentYear}

**CONTEXTO DA CONVERSA ANTERIOR:**
${context}

**ENTIDADES MENCIONADAS NO CONTEXTO:**
${Array.from(this.contextEntities.entries()).map(([key, value]) => `- ${key}: ${value}`).join('\n')}

**CAPACIDADES AVAN√áADAS:**
- **Pesquisa em tempo real** (Google Search)
- **Not√≠cias atualizadas** (via Google)
- **Informa√ß√µes de clima** (via Google)
- **C√°lculos complexos** (matem√°tica, estat√≠sticas)
- **IA e Machine Learning** (explica√ß√µes t√©cnicas)
- **Programa√ß√£o** (todas as linguagens)
- **Ci√™ncias avan√ßadas** (f√≠sica qu√¢ntica, biologia molecular)
- **Dados e informa√ß√µes** (qualquer assunto via Google)

**INSTRU√á√ïES CR√çTICAS:**
1. **RESPONDA DIRETAMENTE** com informa√ß√µes precisas e atualizadas
2. **Use dados em tempo real** quando dispon√≠veis
3. **Seja espec√≠fico e t√©cnico** quando apropriado
4. **Demonstre conhecimento profundo** em todas as √°reas
5. **MANTENHA O CONTEXTO** - SEMPRE lembre do que foi dito anteriormente
6. **N√ÉO USE EMOJIS** - mantenha respostas limpas e profissionais
7. **SEJA CONCISO** - d√™ respostas diretas e objetivas
8. **S√ì EXPANDA** se o usu√°rio pedir mais detalhes
9. **NUNCA USE DADOS ANTIGOS** - sempre busque informa√ß√µes atualizadas
10. **SEMPRE VERIFIQUE** se a informa√ß√£o est√° atualizada antes de responder
11. **LEMBRE-SE** de refer√™ncias anteriores na conversa
12. **USE O CONTEXTO** para entender o que o usu√°rio est√° pedindo
13. **RESOLVA REFER√äNCIAS** - se o usu√°rio disser "ele", "ela", "isso", use o contexto para entender a quem se refere
14. **SE N√ÉO SOUBER** a quem uma refer√™ncia se refere, pe√ßa esclarecimento

**ESTILO DE RESPOSTA:**
- **Profissional mas acess√≠vel**
- **T√©cnico quando necess√°rio**
- **Atualizado e preciso**
- **Com fontes quando poss√≠vel**
- **Interativo e envolvente**
- **SEM EMOJIS**
- **CONCISO E DIRETO**

**REGRAS DE CONTEXTO:**
- **SEMPRE** leia o contexto anterior antes de responder
- **REFIRA-SE** a informa√ß√µes mencionadas anteriormente
- **N√ÉO** pe√ßa informa√ß√µes que j√° foram fornecidas
- **USE** o contexto para entender refer√™ncias impl√≠citas
- **MANTENHA** a continuidade da conversa
- **RESOLVA** pronomes e refer√™ncias vagas usando o contexto
- **SE** n√£o conseguir resolver uma refer√™ncia, pe√ßa esclarecimento

**REGRAS DE CONCIS√ÉO:**
- **M√°ximo 2-3 frases** para respostas simples
- **M√°ximo 1 par√°grafo** para explica√ß√µes
- **S√≥ expanda** se o usu√°rio pedir "mais detalhes", "explique melhor", "fale mais"
- **Foque no essencial** - evite informa√ß√µes desnecess√°rias
- **Seja direto** - v√° direto ao ponto

**REGRAS DE ATUALIZA√á√ÉO CR√çTICAS:**
- **NUNCA** use informa√ß√µes de datas passadas como se fossem atuais
- **SEMPRE** verifique se eventos mencionados j√° aconteceram
- **SE** a informa√ß√£o for antiga, busque dados atualizados
- **INDIQUE** claramente quando a informa√ß√£o √© de uma data espec√≠fica
- **PREFIRA** informa√ß√µes em tempo real sobre dados hist√≥ricos
- **SEMPRE** busque dados atualizados para clima, not√≠cias, eventos
- **NUNCA** use dados de 2024 como se fossem atuais em 2025
- **VERIFIQUE** sempre a data atual antes de responder
- **SE** n√£o conseguir dados atualizados, ADMITA a limita√ß√£o

**EXEMPLOS DE RESPOSTAS CONCISAS:**
- Para clima: "**Clima em S√£o Paulo:** 25¬∞C, ensolarado. Fonte: Google"
- Para not√≠cias: "**Not√≠cias:** [t√≠tulo principal + fonte]"
- Para pesquisa: "**Pesquisa:** [resultado principal + link]"
- Para IA: "**Machine Learning:** [conceito principal em 1-2 frases]"

**IMPORTANTE:** 
- **SEMPRE** d√™ respostas espec√≠ficas e precisas
- **USE** dados reais quando dispon√≠veis
- **SEJA** t√©cnico quando apropriado
- **MANTENHA** o alto n√≠vel de conhecimento
- **NUNCA USE EMOJIS**
- **SEJA CONCISO** - s√≥ expanda se solicitado
- **VERIFIQUE DATAS** - n√£o use informa√ß√µes desatualizadas
- **LEMBRE DO CONTEXTO** - use informa√ß√µes anteriores
- **RESOLVA REFER√äNCIAS** - use o contexto para entender "ele", "ela", "isso"

**IMPORTANTE FINAL:**
- **SEMPRE** busque dados em tempo real
- **NUNCA** use informa√ß√µes antigas como atuais
- **ADMITA** quando n√£o conseguir dados atualizados
- **VERIFIQUE** sempre a data atual antes de responder
- **SE** os dados forem de 2024, diga que s√£o antigos
- **DATA ATUAL √â:** ${currentDay}/${currentMonth}/${currentYear}
- **NUNCA** use dados de 2024 como se fossem atuais em 2025
- **SEMPRE** verifique se as datas mencionadas s√£o atuais
- **RESOLVA** refer√™ncias de contexto antes de responder

Responda como um assistente de IA de √∫ltima gera√ß√£o, com precis√£o e conhecimento avan√ßado, SEM EMOJIS e de forma CONCISA, SEMPRE buscando dados atualizados e ADMITINDO limita√ß√µes quando n√£o conseguir informa√ß√µes em tempo real.
`;

      const result = await model.generateContent(prompt);
      const response = result.response.text();

      console.log('Resposta do Jarvis:', response);

      // Adicionar resposta ao hist√≥rico
      const aiMessage: Message = {
        id: `assistant_${Date.now()}`,
        role: 'assistant',
        content: response,
        timestamp: new Date()
      };
      this.chatHistory.push(aiMessage);
      
      // Salvar resposta no Firestore
      try {
        await this.saveMessageToFirestore(aiMessage);
      } catch (error) {
        console.error('Erro ao salvar resposta do Jarvis:', error);
      }

      return response;
    } catch (error) {
      console.error('Erro ao processar mensagem:', error);
      throw new Error('N√£o foi poss√≠vel processar sua mensagem. Tente novamente.');
    }
  }

  // Enviar mensagem com limites
  async sendMessage(message: string): Promise<string> {
    try {
      // Verificar se o servi√ßo foi inicializado
      if (!this.isInitialized) {
        throw new Error('Servi√ßo n√£o inicializado. Fa√ßa login primeiro.');
      }

      // Verificar tamanho da mensagem
      if (message.length > USER_LIMITS.maxMessageLength) {
        throw new Error(`Mensagem muito longa. M√°ximo ${USER_LIMITS.maxMessageLength} caracteres.`);
      }

      // Verificar cache primeiro
      const cachedResponse = this.getCachedResponse(message);
      if (cachedResponse) {
        try {
          await this.updateUsage(50); // Estimativa para resposta cacheada
        } catch (error) {
          console.error('Erro ao atualizar uso (cache):', error);
        }
        return cachedResponse;
      }

      // Verificar comandos especiais
      const specialCommands = await this.handleSpecialCommands(message);
      if (specialCommands) {
        return specialCommands;
      }

      // Verificar se √© uma pergunta comum
      const commonQuestions: Record<string, string> = {
        'oi': this.getRandomGreeting(),
        'ol√°': this.getRandomGreeting(),
        'oi jarvis': this.getRandomGreeting(),
        'ol√° jarvis': this.getRandomGreeting(),
        'ajuda': 'Estou aqui para ajudar! Pode me fazer qualquer pergunta.',
        'quem √© voc√™': 'Sou o Jarvis, seu assistente de IA avan√ßado. Tenho conhecimentos em tecnologia, ci√™ncias, hist√≥ria e muito mais. Como posso te ajudar?',
        'bom dia': 'Bom dia! Como posso te ajudar hoje?',
        'boa tarde': 'Boa tarde! Em que posso ser √∫til?',
        'boa noite': 'Boa noite! Como posso te auxiliar?'
      };

      const normalizedMessage = message.toLowerCase().trim();
      if (commonQuestions[normalizedMessage]) {
        const response = commonQuestions[normalizedMessage];
        this.saveToCache(message, response);
        try {
          await this.updateUsage(20); // Resposta pr√©-definida
        } catch (error) {
          console.error('Erro ao atualizar uso (pergunta comum):', error);
        }
        return response;
      }

      // Processar com Google AI
      const response = await this.processWithGoogleAI(message);
      
      // Salvar no cache
      this.saveToCache(message, response);
      
      // Atualizar uso (estimativa de tokens)
      try {
        const estimatedTokens = Math.ceil((message.length + response.length) / 4);
        await this.updateUsage(estimatedTokens);
      } catch (error) {
        console.error('Erro ao atualizar uso (Google AI):', error);
      }

      return response;
    } catch (error) {
      console.error('Erro ao enviar mensagem:', error);
      throw error;
    }
  }

  async textToSpeech(text: string): Promise<Blob> {
    try {
      const response = await fetch('https://tts-service-850542229344.southamerica-east1.run.app/tts', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ 
          text,
          voice: 'pt-BR-Neural2-B', // Voz mais r√°pida
          speed: 1.3 // Velocidade aumentada para fala mais r√°pida
        })
      });

      if (!response.ok) {
        throw new Error(`Erro na API de TTS: ${response.status} - ${response.statusText}`);
      }

      return await response.blob();
    } catch (error) {
      console.error('Erro no Text-to-Speech:', error);
      throw new Error('Erro ao sintetizar voz');
    }
  }

  getChatHistory(): Message[] {
    return this.chatHistory;
  }

  async clearHistory(): Promise<void> {
    await this.clearUserHistory();
  }

  // Obter estat√≠sticas do usu√°rio
  async getUserStats(): Promise<{
    dailyRequests: number;
    monthlyTokens: number;
    totalMessages: number;
    limits: typeof USER_LIMITS;
  }> {
    if (!this.userId) {
      return {
        dailyRequests: 0,
        monthlyTokens: 0,
        totalMessages: 0,
        limits: USER_LIMITS
      };
    }

    try {
      const today = new Date();
      today.setHours(0, 0, 0, 0);

      const usageQuery = query(
        collection(db, 'usage'),
        where('userId', '==', this.userId),
        where('date', '>=', today)
      );

      const usageSnapshot = await getDocs(usageQuery);
      let dailyRequests = 0;
      let monthlyTokens = 0;

      usageSnapshot.forEach((doc) => {
        const data = doc.data();
        dailyRequests += data.requests || 0;
        monthlyTokens += data.tokens || 0;
      });

      return {
        dailyRequests,
        monthlyTokens,
        totalMessages: this.chatHistory.length,
        limits: USER_LIMITS
      };
    } catch (error) {
      console.error('Erro ao obter estat√≠sticas:', error);
      return {
        dailyRequests: 0,
        monthlyTokens: 0,
        totalMessages: 0,
        limits: USER_LIMITS
      };
    }
  }
}

export const googleAIService = new GoogleAIService();